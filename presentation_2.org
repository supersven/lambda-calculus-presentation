#+TITLE: Simply Typed Lambda Calculus
#+AUTHOR: Sven Tennie
#+EMAIL: sven.tennie@dreamit.de
#+KEYWORDS: "Simply Typed Lambda Calculus"
#+LANGUAGE:  en
#+OPTIONS: tasks:nil toc:nil H:2
#+BEAMER_THEME: metropolis
#+BEAMER_HEADER: \subtitle{From Untyped to Simply Typed Lambda Calculus}
#+BEAMER_HEADER: \institute[INST]{Dream IT\\\url{https://dreamit.de}}
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_HEADER: \usemintedstyle{tango}
#+LaTeX_HEADER: \usepackage{fontspec}
# #+LaTeX_HEADER: \setmonofont[Contextuals={Alternate}]{Fira Code}
#+LaTeX_HEADER: \newminted{haskell}{mathescape=true}
#+LaTeX_HEADER: \setminted[haskell]{mathescape=true}

* Untyped Lambda Calculus
** Untyped Lambda Calculus - Recapitulation
*** We can boil down computation to a tiny calculus
#+BEAMER: \pause
*** All we need is:
- Function Definition / *Abstraction* ($\lambda x . e$)
- Function *Application* ($e \ e$)
- Parameters / *Variables* ($x$)
#+BEAMER: \pause
**** Then we get:                                    :B_column:
     :PROPERTIES:
     :BEAMER_col: 0.35
     :BEAMER_env: block
     :BEAMER_envargs: C[t]
     :END:
- Booleans
- Numerals
- Data Structures
- Control Flow
- ...
#+BEAMER: \pause
**** Turing Completeness :B_column:
     :PROPERTIES:
     :BEAMER_col: 0.55
     :BEAMER_env: block
     :END:
- If it can be computed, it can be computed in Lambda Calculus!

** Example - $(\lambda p . \lambda q . p) \ a \ b$
\begin{align*}
\onslide<1->{ & ( \lambda \color<3->{orange}{p} . & \lambda q . & \color<3->{orange}{p} & ) & & \color<3->{orange}{a} & & b & & \onslide<2->{ \text{Substitute $p \mapsto a $}} } \\
\onslide<4->{ & (  & \lambda \color<6->{blue}{q} . & \color<4->{orange}{a} & ) &&  & & \color<6->{blue}{b} & & \onslide<5->{ \text{Substitute $q \mapsto b $}} } \\
\onslide<7->{ & (  &  & \color<4->{orange}{a} & ) &&  & &  & & }
\end{align*}

*** Meaning
- $\lambda p . \lambda q . p$ :: Is a function that returns a function ($\lambda q . p$)
- $a , b$ :: Some variables (defined somewhere else)
- $p$ :: Is a variable that is bound to the parameter with the same name


** Build an Interpreter
*** Let's build an interpreter
- Deepen our intiution
- Later move on to the /Simply Typed Lambda Calculus/
  - Why do we need types?
  - How does a type checker work?
  - How does it restrict the programs we might write?

- We'll do /Math Driven Development/
  - Look at the concepts in math first, then translate them to Haskell

** Structure
\begin{align*}
e ::= & & \text{Expressions:} \\
& \ x & \text{Variable} \\
& \ \lambda x.e & \text{Abstraction} \\
& \ e \ e & \text{Application}
\end{align*}

- $\lambda x.e$ :: Function Definition
- $e \ e$ :: Function Application

** Abstract Syntax Tree
***  :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:

**** Lambda Expression                                                :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.2
    :END:

$(\lambda x . x) \ y$

**** AST                                                              :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:

#+BEGIN_SRC dot :file dot/untyped_lambda_calculus_ast.dotnix
.ps :taHey @pheymann ,
Thanks a lot for checking that the proposal is "sound". :+1: 
I really appreciate that!ngle dot/
untyped_lambda_calculus_ast.dot
digraph untyped_lambda_calculus_ast {
  App [label = "Application"];
  Lam [label = "Lambda"]
  Param [label = "Parameter: x"]
  VarX [label = "Variable: x"]
  VarY [label = "Variable: y"]

  App -> {Lam VarY}
  Lam -> {Param VarX}

}
#+END_SRC

#+attr_latex: :height 3cm
#+RESULTS:
[[file:dot/untyped_lambda_calculus_ast.dot.ps]]

*** Underneath :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

*** Meaning:
- Identity function $(\lambda x . x)$ is applied to a variable ($y$)


** Interpreter - Syntax
#+BEGIN_SRC haskell :tangle src/UntypedSyntax.hs
  module UntypedSyntax where

  type Name = String

  data Expr                    -- $e ::= \ \ \ \ \ \ \ \ \ \ \ \text{Expressions:}$
    = Var Name                 --       $x \ \ \  \ \ \ \ \ \ \ \ \text{Variable}$
    | Lambda Name              --       $\lambda x.e \ \ \  \ \ \ \ \text{Abstraction}$
             Expr
    | App Expr                 --       $e \ e \ \ \  \ \ \ \ \ \ \text{Application}$
          Expr
    deriving (Eq, Show)
#+END_SRC

** Interpreter - Syntax - Examples

#+BEGIN_SRC haskell :tangle src/UntypedSyntaxExamples.hs
  module UntypedSyntaxExamples where

  import UntypedSyntax

  -- $true \equiv \lambda p . \lambda q . p$
  true :: Expr
  true = Lambda "p" (Lambda "q" (Var "p"))

  -- $false \equiv \lambda p . \lambda q . q$
  false :: Expr
  false = Lambda "p" (Lambda "q" (Var "q"))

  -- $and \equiv \lambda p . \lambda q . p \ q \ p$
  and :: Expr
  and = Lambda "p" $ Lambda "q" $ App (App (Var "p") (Var "q")) (Var "p")

#+END_SRC


* Natural Deduction

** Notation

\begin{align*}
\frac{}{Axiom} & \quad & \text{(A1)} \\ \\
\frac{Antecedent}{Conclusion} & \quad & \text{(A2)} \\ \\
\end{align*}

*** Meaning:
- Axiom :: Rule without Precondition
- Antecedent :: Precondition - if it's fulfilled this rule applies.
- Conclusion :: What follows from this rule.
- A1, A2 :: Names for the rules

** Proof: 2 is a Natural Number
***  :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:

**** Rules                                                            :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

\begin{align*}
\frac{}{0 : \mathtt{Nat}} & \quad & \text{(A1)} \\ \\
\frac{n : \mathtt{Nat}}{\mathtt{succ}(n) : \mathtt{Nat}} & \quad & \text{(A2)} \\ \\
\end{align*}


*** Underneath :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

*** Meaning:
- A1 :: $0$ is a natural number (by definition)
- A2 :: The successor of a natural number is a natural number

** Proof: 2 is a Natural Number
***  :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:

**** Rules                                                            :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

\begin{align*}
\frac{}{0 : \mathtt{Nat}} & \quad & \text{(A1)} \\ \\
\frac{n : \mathtt{Nat}}{\mathtt{succ}(n) : \mathtt{Nat}} & \quad & \text{(A2)} \\ \\
\end{align*}

**** Proof                                                            :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

\begin{equation*}
\dfrac
  {
    \quad
    \dfrac
    {
      \quad
      \dfrac{}
      {
        0 : Nat
      }
      \quad \text{(A1)}
    }
    {
      succ(0) : Nat
    }
    \quad \text{(A2)}
  }
  {
    succ(succ(0)) : Nat
  }
  \quad \text{(A2)}
\end{equation*}

*** Underneath :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

*** Meaning:
- A1 :: $0$ is a natural number (by definition)
- A2 :: The successor of a natural number is a natural number
- $\to$ :: Thus the sucessor of the successor of $0$ ($2$) must be a natural number

* Evaluation Rules
** Evaluation Rules - Call by Value - E-App1
\begin{align*}
 \frac{e_1 \to e_1'}{e_1 e_2 \to e_1' e_2} & \quad & \text{E-App1} \\ \\
\end{align*}

*** Meaning:
- Under the condition that $e_1$ can be reduced further, do it.

** Evaluation Rules - Call by Value - E-App2
\begin{align*}
 \frac{e_2 \to e_2'}{v_1 e_2 \to v_1 e_2'} & \quad & \text{E-App2} \\ \\
\end{align*}

*** Meaning:
- Under the condition that $e_2$ can be reduced further and $v_1$ is a value, do it.
- "Bare" Untyped Lambda Calculus:
  - Only Lambdas (functions) are values.
  - But you can add Ints, Booleans, etc. ("Enriched Untyped Lambda Calculus")

** Evaluation Rules - Call by Value - E-AppLam
\begin{align*}
 {(\lambda x . e) v \to [x / v] e } & \quad & \text{E-AppLam} \\ \\
\end{align*}

*** Meaning:
- If a lambda (function) is applied to a value, substitute that value for it's parameter.
- "substitute" : replace it for every occurence in the lambda's body

** Interpreter - Evaluation
#+BEGIN_SRC haskell :tangle src/UntypedEval.hs

  module UntypedEval where

  import UntypedSyntax

  eval :: Expr -> Expr
  -- No rule for variables
  eval variable@(Var _) = variable
  -- No rule for lambdas
  eval lambda@(Lambda _ _) = lambda
#+END_SRC

** Interpreter - Evaluation

#+BEGIN_SRC haskell :tangle src/UntypedEval.hs
  eval (App e1 e2)
  --
  -- $ \frac{e_1 \to e_1'}{e_1 e_2 \to e_1' e_2} \quad (E-App1) $
  --
   =
    let e1' = eval e1
  --
  -- $ \frac{e_2 \to e_2'}{v_1 e_2 \to v_1 e_2'} \quad (E-App2) $
  --
     in let e2' = eval e2
         in case e1'
                  of
  --
  -- $ {(\lambda x . e) v \to [x / v] e } \quad (E-AppLam) $
  --
              (Lambda name e1'_body) -> eval $ substitute name e2' e1'_body
              e1' -> App e1' e2'
#+END_SRC

** Interpreter - Substitution
#+BEGIN_SRC haskell :tangle src/UntypedEval.hs
  substitute :: Name -> Expr -> Expr -> Expr
  --
  -- If the Name matches: Substitute this Var by it's substitution
  -- Otherwise: Leave it as is
  --
  substitute name substitution var@(Var varName)
    | name  == varName = substitution
    | otherwise = var
  --
  -- Recursively substitute in both parts of Applications
  --
  substitute name substitution (App term1 term2) =
    App (substitute name substitution term1) (substitute name substitution term2)
#+END_SRC

** Interpreter - Substitution
#+BEGIN_SRC haskell :tangle src/UntypedEval.hs
  --
  -- Only substitute in Lambda's body, if the parameter doesn't
  -- redefine the Name in it's scope
  --
  substitute name substitution (Lambda varName term) =
    if name == varName
      then Lambda varName term
      else Lambda varName (substitute name substitution term)
#+END_SRC

** Tests
#+BEGIN_SRC haskell :tangle test/UntypedEvalExamplesSpec.hs
  module UntypedEvalExamplesSpec where

  import NaiveUntypedEval
  import Prelude hiding (and)
  import Test.Hspec
  import UntypedSyntax
  import UntypedSyntaxExamples

  main :: IO ()
  main = hspec spec

  spec :: Spec
  spec =
    describe "eval" $
      it "should evaluate these terms"  $ do
  --
  -- $a \to a $
  --
        eval (Var "a") `shouldBe` Var "a"
#+END_SRC

** Tests
#+BEGIN_SRC haskell :tangle test/UntypedEvalExamplesSpec.hs
  --
  -- $true \equiv \lambda p . \lambda q . p$ 
  --
  -- $true \ a \ b \to a$
  --
        eval (App (App true (Var "a")) (Var "b")) `shouldBe` Var "a"
#+END_SRC

#+BEGIN_SRC haskell :tangle test/UntypedEvalExamplesSpec.hs
  --
  -- $false \equiv \lambda p . \lambda q . q$
  --
  -- $and \equiv \lambda p . \lambda q . p \ q \ p$
  --
  -- $and \ true \ false \to false$"
  --
        eval (App (App and true) false) `shouldBe`
          Lambda "p" (Lambda "q" (Var "q"))
#+END_SRC

* Simply Typed Lambda Calculus

** Structure
\begin{align*}
e ::= & & \text{Expressions:} \\
& \ x & \text{Variable} \\
& \ \lambda x \alert{:\tau}.e & \text{Abstraction} \\
& \ e \ e & \text{Application}
\end{align*}

- $\tau$ :: Type of the parameter $x$
  - `Bool`, `Int`, ...

** What's a Type?

A Type is a set of values that an expression may return:
- Bool :: True, False
- Int :: $[-2^{29} .. 2^{29}-1]$ (in Haskell, `Data.Int`)

Simple types don't have parameters, no polymorphism:
- =Bool=, =Int= :: have no parameters $\to$ simple types
- =Maybe a= :: takes a type parameter ($a$) $\to$ not a simple type
- =a -> a= :: is polymorphic $\to$ not a simple type

** Type Safety = Progress + Preservation
*** **Progress** :  If an expression is well typed then either it is a value, or it can be further evaluated by an available evaluation rule.
*** **Preservation** : If an expression $e$ has type $\tau$, and is evaluated to $e'$, then $e'$ has type $\tau$.
    - $e \equiv (\lambda x: Int.x) 1$ and $e' \equiv 1$ have both the same type: `Int`

** Evaluation
*** Evalution rules stay the same!
    - Type checking is done upfront

** Typing Rules - Variables
\begin{align*}
 \frac{x:\sigma \in \Gamma}{\Gamma \vdash x:\sigma} & \quad & \text{T-Var} \\ \\
\end{align*}  

*** Meaning
- \Gamma :: The Typing Environment, a list of $(Variable : Type)$ pairs (associations)
- $x:\sigma \in \Gamma$ :: If $(x, \sigma)$ is in the Typing Environment
- $\Gamma \vdash x:\sigma$ :: $x$ has type $\sigma$

** Typing Rules - Constants
\vspace{-0.5cm}
\begin{align*}
 \Gamma \vdash n : \text{Int} & \quad & \text{T-Int} \\ \\
 \Gamma \vdash \text{True} : \text{Bool} & \quad & \text{T-True} \\ \\
 \Gamma \vdash \text{False} : \text{Bool} & \quad  & \text{T-False} \\ \\
\end{align*}  

\vspace{-1.5cm}
*** Meaning
- =True=, =False= :: literals / constants are of type =Bool=
- $n$ :: number literals / constants are of =Int=
*** Why do we need $\Gamma$ here?
- We handle Type Constructors like variables
- Think: $\Gamma \equiv \emptyset , True : Bool, False : Bool, 0 : Int, 1 : Int, \dots$

** Typing Rules - Lambdas
\begin{align*}
 \frac{\Gamma, x : \tau_1 \vdash e : \tau_2}{\Gamma \vdash \lambda x:\tau_1 . e : \tau_1 \rightarrow \tau_2 } & \quad & \text{T-Lam} \\ \\
\end{align*}  

*** Meaning
- Condition :: With $x : \tau_1$ in the Typing Environment, $e$ has type \tau_2
- Conclusion :: $\lambda x:\tau_1 . e$ has type $\tau_1 \rightarrow \tau_2$
- Because $e$ has type \tau_2 if $x$ has type \tau_1

** Typing Rules - Applications
\begin{align*}
 \frac{\Gamma \vdash e_1 : \tau_1 \rightarrow \tau_2 \quad \Gamma \vdash e_2 : \tau_1}{\Gamma \vdash e_1 e_2 : \tau_2} & \quad & \text{T-App} \\ \\
\end{align*}  

*** Meaning
- Condition :: If $e_1$ is a function of type $\tau_1 \rightarrow \tau_2$ and $e_2$ has type $\tau_2$
- Conclusion :: Then the type of $e_1 e_2$ (function application) is $\tau_2$
#+BEAMER: \pause
#+BEGIN_SRC haskell
id' :: Int -> Int
id' i = i

1 :: Int
(id' 1) :: Int
#+END_SRC

** Type Checker - Expressions
#+BEGIN_SRC haskell :tangle src/TypedSyntax.hs
  module TypedSyntax where

  import qualified Data.Map.Strict as Map

  type Name = String
  type Error = String

  data Expr                    -- $e ::= \quad \quad \quad \quad \quad \quad \quad \quad Expressions:$
    = IntValue Int             --     $[-2^{29} .. 2^{29}-1] \quad \quad \quad \quad \quad \text{Integer Literal}$
    | BoolValue Bool           --     $True \ | \ False \quad \quad \quad \quad \quad \quad \ \text{Boolean Literal}$
    | Var Name                 --     $x \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \ \text{Variable}$
    | App Expr                 --     $e \ e \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \ \text{Application}$
          Expr
    | Lambda Name              --     $\lambda x \mathbf{:\tau}.e \quad \quad \quad \quad \quad \quad \quad \quad \ \text{Abstraction}$
             Type
             Expr
    deriving (Eq, Show)

#+END_SRC

** Type Checker - Types
#+BEGIN_SRC haskell :tangle src/TypedSyntax.hs
  type Environment = Map.Map Name Type

  data Type                    -- $\tau ::= \quad \quad \quad \quad \quad \quad Types:$
    = TInt                     --     $Int \quad \quad \quad \quad \quad \quad \text{Integer}$
    | TBool                    --     $Bool \quad \quad \quad \quad \quad \ \text{Boolean}$
    | TArr Type                --     $\tau_1 \to \tau_2 \quad \quad \quad \ \ \text{Abstraction / Function}$
           Type
    deriving (Eq, Show)
#+END_SRC


** Type Checker - Literals
#+BEGIN_SRC haskell :tangle src/TypedCheck.hs
  module TypedCheck where

  import Data.Either.Extra
  import qualified Data.Map.Strict as Map

  import TypedSyntax

  check :: Environment -> Expr -> Either Error Type
  --
  -- $ \Gamma \vdash n : \text{Int}  \quad  \text{(T-Int)} $
  --
  check _ (IntValue _) = Right TInt
  --
  -- $ \Gamma \vdash \text{True} : \text{Bool}  \quad  \text{(T-True)} $
  --
  check _ (BoolValue True) = Right TBool
  --
  -- $ \Gamma \vdash \text{False} : \text{Bool}  \quad   \text{(T-False)} $
  --
  check _ (BoolValue False) = Right TBool
#+END_SRC

** Type Checker - Lambda Abstraction
#+BEGIN_SRC haskell :tangle src/TypedCheck.hs
--
-- $ \frac{\Gamma, x : \tau_1 \vdash e : \tau_2}{\Gamma \vdash \lambda x:\tau_1 . e : \tau_1 \rightarrow \tau_2 }  \quad  \text{(T-Lam)} $
--
check env (Lambda name atype e) = do
  t <- check (Map.insert name atype env) e
  return $ TArr atype t
#+END_SRC

** Type Checker - Application
#+BEGIN_SRC haskell :tangle src/TypedCheck.hs
  --
  -- $  \frac{\Gamma \vdash e_1 : \tau_1 \rightarrow \tau_2 \quad \Gamma \vdash e_2 : \tau_1}{\Gamma \vdash e_1 e_2 : \tau_2}  \quad  \text{(T-App)} $
  --
  check env (App e1 e2) = do
    t1 <- check env e1
    case t1 of
      (TArr ta1 ta2) -> do
        t2 <- check env e2
        if ta1 == t2
          then Right ta2
          else Left $ "Expected " ++ (show ta1) ++ " but got : " ++ (show t2)
      _ -> Left $ "Expected TArr but got : " ++ (show t1)
#+END_SRC

** Type Checker - Variables
#+BEGIN_SRC haskell :tangle src/TypedCheck.hs
  --
  -- $  \frac{x:\sigma \in \Gamma}{\Gamma \vdash x:\sigma}  \quad  \text{(T-Var)} $
  --
  check env (Var name) = find env name

  find :: Environment -> Name -> Either Name Type
  find env name = maybeToEither "Var not found!" (Map.lookup name env)
#+END_SRC

** Tests
#+BEGIN_SRC haskell :tangle test/TypedCheckExamplesSpec.hs
  module TypedCheckExamplesSpec where

  import Test.Hspec
  import TypedCheck
  import TypedSyntax

  import qualified Data.Map.Strict as Map

  main :: IO ()
  main = hspec spec

  spec :: Spec
  spec = do
    describe "check" $
      it "should type check these terms" $
  --
  -- $(\lambda x:Int . x) 42 :: Int $
  --
       do
        check Map.empty (App (Lambda "x" TInt (Var "x")) (IntValue 5)) `shouldBe`
          Right TInt
  --
  -- Does not type check: $42 False$
  --
        check Map.empty (App (IntValue 42) (BoolValue False)) `shouldBe` Left "Expected TArr but got : TInt"

#+END_SRC

* End
** Thanks
- Hope you enjoyed this talk and learned something new.
- Hope it wasn't too much math and dusty formulas ... :)


* Books						 :B_appendix:
  :PROPERTIES:
  :BEAMER_env: appendix
  :END:
** Good Math

*** Image :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: column
    :END:
[[./good_math.jpg]]

*** Description                                                    :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: column
    :END:
/A Geek's Guide to the Beauty of Numbers, Logic, and Computation/
- Easy to understand

** Types and Programming Languages

*** Image                                                          :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: column
    :END:
[[./types-and-programming-languages.jpg]]

*** Description                                                       :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: column
    :END:
- Types systems explained by building interpreters / checkers and proving properties
- Very "mathematical", but very complete and self-contained



** Write you a Haskell
*** Image                                                          :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: column
    :END:
[[./write-you-a-haskell.png]]

*** Description                                                       :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: column
    :END:
/Building a modern functional compiler from first principles./
- Starts with the Lambda Calculus and goes all the way down to a full Haskell compiler
- Available for free - Not finished, yet

