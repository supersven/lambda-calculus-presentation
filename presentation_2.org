
* Untyped Lambda Calculus
** Interpreter
#+BEGIN_SRC haskell :tangle src/UntypedEval.hs
  module UntypedEval where
  import qualified Data.Map.Strict as Map

  type Name = String
  type Environment = Map.Map Name Term

  data Term = Variable Name |
              Application Term Term |
              Abstraction Name Term
              deriving (Eq, Show)

  eval ::Environment -> Term -> Maybe Term
  eval env (Variable name) = find env name
  eval env (Application term1 term2) = case term1 of
    (Abstraction name _) -> eval (Map.insert name term2 env) term1
    _ -> Nothing
  eval _ abstraction@(Abstraction _ _) = Just abstraction

  find ::  Environment -> Name -> Maybe Term
  find env name = Map.lookup name env
#+END_SRC

** Tests

* Simply Typed Lambda Calculus

** Interpreter
** Type Checker
#+BEGIN_SRC haskell :tangle src/TypedCheck.hs
  module TypedCheck where

  import qualified Data.Map.Strict as Map
  import Data.Either.Utils

  type Name = String
  type Environment = Map.Map Name Term

  data Type  = TInt
             | TBool
             | TArr Type Type
             deriving (Eq, Show)

  data Term = Variable Name |
                Application Term Term |
                Abstraction Name Type Term
                deriving (Eq, Show)

  check :: Environment -> Term -> Either String Type
  check env (Variable name) = maybeToEither "Variable not found!" (find env name)
  check env (Application term1 term2) = TArr ()
  check env (Abstract name atype term) =

  find ::  Environment -> Name -> Maybe Type
  find env name = Map.lookup name env
#+END_SRC

** Tests
