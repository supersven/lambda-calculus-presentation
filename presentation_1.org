#+TITLE: Untyped Lambda Calculus
#+AUTHOR: Sven Tennie
#+EMAIL: sven.tennie@dreamit.de
#+KEYWORDS: "Untyped Lambda Calculus" "Structure and Evaluation" "Currying" "Church Encodings"
#+LANGUAGE:  en
#+OPTIONS: tasks:nil toc:nil H:2
#+BEAMER_THEME: metropolis
#+BEAMER_HEADER: \subtitle{Structure and Evaluation, Currying, Church Encodings}
#+BEAMER_HEADER: \institute[INST]{Dream IT\\\url{https://dreamit.de}}

#+startup: beamer
#+LaTeX_CLASS: beamer

* Introduction
** Lambda Calculus
- Invented by Alonzo Church (1920s)
- Equally expressive to the Turing Machine(s)
- Formal Language
- Computational Model
  - Lisp (1950s)
  - ML
  - Haskell
- "Lambda Expressions" in almost every modern programming language
 
** Why should I care?
- Simple Computational Model
  - to describe structure and behaviour (E.g. Operational Semantics, Type Systems)
  - to reason and prove
#+BEAMER: \pause
- Explains why things in FP are like they are
  - Pure Functions
  - Higher-Order Functions
  - Currying
  - Lazy Evaluation
#+BEAMER: \pause
- Understand FP Compilers
  - Introduce FP stuff into other languages
  - Write your own compiler
  - GHC uses an enriched Lambda Calculus internally

* Basics
** Untyped Lambda Calculus

\begin{align*}
t ::= & & \text{Terms:} \\
& \ x & \text{Variable} \\
& \ \lambda x.t & \text{Abstraction} \\
& \ t \ t & \text{Application}
\end{align*}

#+BEAMER: \pause
*** Example - Identity

*** Lambda Calculus                                                :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
    \begin{equation*}
    \underbrace{
      \underbrace{\lambda x.x}_\text{Abstraction}
      \quad
      \underbrace{y}_\text{Variable}
    }_\text{Application}
    \to y
    \end{equation*}
#+BEAMER: \pause
*** Javascript                                                :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
\begin{equation*}
\underbrace{(\underbrace{function \ (x)\{return \ x;\}}_{Abstraction}) \ (\underbrace{y}_{Variable})}_{Application}
\end{equation*}

** Example - $(\lambda x . \lambda y . x \ y) \ a \  b$
*** Abstractions
Think: Function Definitions

$(\underline{\lambda x . \underline{\lambda y . x \ y }}) \ a \  b$

#+BEAMER: \pause

*** Variables
Think: Parameters

$(\lambda x . \lambda y . \underline{x} \ \underline{y}) \ \underline{a} \  \underline{b}$

#+BEAMER: \pause

*** Applications
Think: Function Calls

$\lefteqn{\underline{\phantom{ (\lambda x . \lambda y . \underline{x \ y}) \ a }}} \lefteqn{(\lambda x . \lambda y . \underline{x \ y}) \ \underline{a \ b}}$

** Example - $(\lambda x . \lambda y . x \ y) \ a \  b$
\begin{align*}
\onslide<1->{    & ( \lambda \color<3->{orange}{x} . &    \lambda y                     .     & \color<3->{orange}{x} & y                     & ) & \color<3->{orange}{a} & & b & & \onslide<2->{ \text{Substitute $x \mapsto a $}} } \\
\onslide<4->{\to &                                   & ( \lambda \color<6->{cyan}{y}    .     & \color{orange}{a}     & \color<6->{cyan}{y}   & ) &                       & & \color<6->{cyan}{b} & & \onslide<5->{\text{Substitute $y \mapsto b$}} } \\
\onslide<7->{\to &                                   &                                        & \color{orange}{a}     & \color{cyan}{b}       &   &                       & &  & &}
\end{align*}

** Notational Conventions
- We use parentheses to clearify what's meant
- Applications associate to the left
\begin{equation*}
s \ t \ u \equiv (s \ t) \ u
\end{equation*}
- Abstractions expand as much to the right as possible
\begin{equation*}
\lambda x . \lambda y . x \ y \ x \equiv \lambda x . ( \lambda y . (x \ y \ x ) )
\end{equation*}

** Scope
\begin{equation*}
\lambda x . \lambda y . x \ y \ z
\end{equation*}

*** /Bound/ and /Free/
- $\lambda y$ :: $y$ is /bound/, $x$ and $z$ are /free/
- $\lambda x$ :: $x$ and $y$ are /bound/, $z$ is /free/
- $\lambda x$, $\lambda y$ :: /binders/
#+BEAMER: \pause
*** A term with no free variables is /closed/
- A /combinator/
- $id \equiv \lambda x . x$
- Y, S, K, I ...

** Higher Order Functions
- Functions that take or return functions
  - Are there "by definition"

\begin{equation*}
\underbrace{
  \underbrace{\lambda x.x}_{Abstraction}
 \quad
 \underbrace{\lambda y.y}_{Abstraction}
}_{Application}
\to \underbrace{\lambda y.y}_{Abstraction}
\end{equation*}

** Currying

*** Idea
- Take a function with $n$ arguments
- Create a function that takes one argument and returns a function with $n-1$ arguments

#+BEAMER: \pause

*** Example
  - ~(+1)~ Section in Haskell
  - $(\lambda x . \lambda y . + x \ y) \ 1  \to \lambda y . + \ 1 \ y$

#+BEAMER: \pause

- Partial Function Application is there "by definition"
  - You can use this stunt to "curry" in every language that supports "Lambda Expressions"

*** Notes :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:
- Moses Schönfinkel
  - If you want to sound smart: Schönfinkeling

** Reductions and Conversions
*** Alpha Conversion                                               :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: block
   :END:
\begin{equation*}
\lambda x . x \to_\alpha \lambda y . y
\end{equation*}

#+BEAMER: \pause

*** Beta Reduction                                                 :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: block
   :END:
\begin{equation*}
(\lambda x . x) \ y \to_\beta y
\end{equation*}

#+BEAMER: \pause

*** Eta Conversion
Iff (if and only if) $x$ is not free in $f$:
\begin{gather*}
\lambda x . f \ x \to_\eta f \\
(\lambda x . \underbrace{(\lambda y . y)}_{f} \ x) \ a \to_\eta \underbrace{(\lambda y . y)}_{f} \ a
\end{gather*}
#+BEAMER: \pause
If $x$ is free in $f$, \eta conversion not possible:
\begin{equation*}
\lambda x . \underbrace{(\lambda y . y \ \overset{\substack{\text{Bound} \\ \downarrow}}{x})}_{f} \ x \not\to_\eta ( \lambda y . y \ \overset{\substack{\text{Free?!} \\ \downarrow}}{x})
\end{equation*}

** Remarks
- Everything (Term) is an Expression
  - No statements
- No "destructive" Assignments
  - The reason why FP Languages promote pure functions
  - But you could invent a built-in function to manipulate "state"...


* Evaluation
** Operational Semantics
- We learned how to write down and talk about Lambda Calculus Terms

- How to evaluate them?

- Different Strategies
  - Interesting outcomes

** Full Beta-Reduction
- RedEx
  - \textbf{Red}ucible \textbf{Ex}pression
  - Always an Application

\begin{equation*}
\underbrace{
(\lambda x.x) \ (\underbrace{(\lambda y.y) \ (\lambda z.\underbrace{(\lambda a.a) \ z}_{RedEx})}_{RedEx})
}_{RedEx}
\end{equation*}
#+BEAMER: \pause
*** Full Beta-Reduction 
- Any RedEx, Any Time
- Like in Arithmetics
- Too vague for programming...

*** Notes :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:
How to write a good test if the next step could be several expressions?

** Normal Order Reduction
\begin{align*}
\onslide<1->{ & \alert<2->{ (\lambda x.x) \ ((\lambda y.y) \ (\lambda z.(\lambda a.a) \ z)) } \\ }
\onslide<3->{\to & \alert<4->{(\lambda y.y) \ (\lambda z.(\lambda a.a) \ z) } \\ }
\onslide<5->{\to & \lambda z.\alert<6->{(\lambda a.a) \ z } \\ }
\onslide<7->{\to & \lambda z.z }
\end{align*}

*** Normal Order Reduction
- Left-most, Outer-most RedEx

** Call-by-Name
\begin{align*}
\onslide<1->{ & \alert<2->{ (\lambda x.x) \ ((\lambda y.y) \ (\lambda z.(\lambda a.a) \ z)) } \\ }
\onslide<3->{\to & \alert<4->{(\lambda y.y) \ (\lambda z.(\lambda a.a) \ z) } \\ }
\onslide<5->{\to & \lambda z.(\lambda a.a) \ z  \\ }
\onslide<6->{\not\to}
\end{align*}

*** Call-by-Name
  - like Normal Order Reduction, but *no reductions inside Abstractions*
    - Abstractions are values
  - lazy, non-strict
    - *Parameters are not evaluated before they are used*
  - Optimization: Save results \to /Call-by-Need/

** Call-by-Value
\begin{align*}
\onslide<1->{ &  (\lambda x.x) \ \alert<2->{((\lambda y.y) \ (\lambda z.(\lambda a.a) \ z)) } \\ }
\onslide<3->{ \to &  \alert<4->{(\lambda x.x) \ (\lambda z.(\lambda a.a) \ z)} \\ }
\onslide<5->{ \to &  \lambda z.(\lambda a.a) \ z \\ }
\onslide<6->{\not \to}
\end{align*}

*** Call-by-Value
  - Outer-most, only if right-hand side was reduced to a value 
  - *No reductions inside Abstractions*
    - Abstractions are values
  - eager, strict
    - *Parameters are evaluated before they are used*

* Church Encodings
** Church Encodings

- Encode Data into the Lambda Calculus

- To simplify our formulas, let's say that we have declarations

\begin{gather*}
id  \equiv \lambda x.x \\
id \ y \to  y
\end{gather*}

** Booleans
*** Definitions                                                    :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
true & \equiv & \lambda t. \lambda f.t \\
false & \equiv & \lambda t. \lambda f.f \\
\\
\onslide<2->{
test & \equiv &
 \lambda c . 
 \lambda t . 
 \lambda f . 
 c \ t \ f }
\end{align*}
#+BEAMER: \pause
*** Example                                                        :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<3->{& \alert<4->{test} \ true \ a \ b } \\
\onslide<5->{\equiv & \ \alert<6->{(\lambda c . \lambda t .  \lambda f .  c \ t \ f) \ true } \ a \ b } \\
\onslide<7->{\to & \ \alert<8->{(\lambda t .  \lambda f .  true \ t \ f) \ a} \ b } \\
\onslide<9->{\to & \ \alert<10->{(\lambda f .  true \ a \ f) \ b }} \\
\onslide<11->{\to & \alert<12->{true} \ a \ b } \\
\onslide<13->{\equiv & \alert<14->{(\lambda t. \lambda f.t) \ a} \ b } \\
\onslide<15->{\to & \alert<16->{(\lambda f.a) \ b } } \\
\onslide<17->{\to & a }
\end{align*}

** And
*** Definitions                                                    :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
true & \equiv & \lambda t. \lambda f.t \\
false & \equiv & \lambda t. \lambda f.f \\
\\
\onslide<2->{
and & \equiv & \lambda p . \lambda q . p \ q \ p
}
\end{align*}

*** Example                                                        :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<3->{& \alert<4->{and} \ true \ false } \\
\onslide<5->{\equiv & \alert<6->{(\lambda p . \lambda q . p \ q \ p) \ true } \ false } \\
\onslide<7->{\to & \alert<8->{(\lambda q . true \ q \ true) \ false } } \\
\onslide<9->{\to & \alert<10->{true} \ false \ true } \\
\onslide<11->{\equiv & \alert<12->{(\lambda t. \lambda f.t) \ false} \ true } \\
\onslide<13->{\to & \alert<14->{(\lambda f .false) \ true } } \\
\onslide<15->{\to & false }
\end{align*}

** Or
\begin{equation*}
\lambda p . \lambda q . p \ p \ q
\end{equation*}

** Pairs
*** Definitions                                                    :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<1->{pair & \equiv & \lambda x. \lambda y . \lambda z . z \ x \ y } \\
\onslide<2->{
first & \equiv & (\lambda p. p) \ \lambda x . \lambda y . x \\
second & \equiv & (\lambda p. p) \ \lambda x . \lambda y . y
}
\end{align*}

*** Example                                                        :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*} 
\onslide<3->{pair_{AB} & \equiv & \alert<4->{pair}  \ a \ b } \\
\onslide<5->{& \equiv & \alert<6->{(\lambda x. \lambda y . \lambda z . z\ x\ y) \ a } \ b } \\
\onslide<7->{& \to & \alert<8->{(\lambda y . \lambda z . z\  a\ y) \ b } } \\
\onslide<9->{& \to & \lambda z . z\  a \ b } \\
\onslide<10->{& \equiv & pair'_{ab} } \\
\end{align*}

** Pairs (continued)
*** Definitions                                                    :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<1->{pair & \equiv & \lambda x. \lambda y . \lambda z . z \ x \ y \\
first & \equiv & (\lambda p. p) \ \lambda x . \lambda y . x \\
pair'_{ab} & \equiv & \lambda z . z\  a \ b \\
}
\end{align*}

*** Example                                                        :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<2->{& & \alert<3->{first} \ pair'_{ab} } \\
\onslide<4->{& \equiv & \alert<5->{(\lambda p. p) \ (\lambda x . \lambda y . x) \ pair'_{ab}} } \\
\onslide<6->{& \to & \alert<7->{pair'_{ab}} \ (\lambda x . \lambda y . x) } \\
\onslide<8->{& \equiv & \alert<9->{(\lambda z . z\  a \ b) \ (\lambda x . \lambda y . x) }} \\
\onslide<10->{& \to & \alert<11->{(\lambda x . \lambda y . x) \ a} \ b } \\
\onslide<12->{& \to & \alert<13->{(\lambda y . a) \ b } } \\
\onslide<14->{& \to & a}
\end{align*}

# TODO Is pair_{ab} equivalent to it's reduced result?
** Numerals
*** Peano Axioms                                              :B_block:BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: block
   :END:
Every natural number can be defined with $0$ and a successor function
\begin{align*}
0 & \equiv & \lambda f. \lambda x. x \\
1 & \equiv & \lambda f. \lambda x. f \ x \\
2 & \equiv & \lambda f. \lambda x. f \ (f \ x) \\
3 & \equiv & \lambda f. \lambda x. f \ (f \ (f \ x)) \\
\end{align*}
*** Meaning                                                   :B_block:BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: block
   :END:
- $0$ :: $f$ is evaluated $0$ times
- $1$ :: $f$ is evaluated once
- $x$ :: can be every lambda term

** Numerals Example - Successor

*** Definitions                                                    :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<1->{
0 & \equiv & \lambda f. \lambda x. x \\
1 & \equiv & \lambda f. \lambda x. f \ x \\
}
\\
\onslide<2->{
successor & \equiv & \lambda n.  \lambda f. \lambda x. f \ (n \ f \ x)
}
\end{align*}

*** Example                                                        :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<+(2)->{& & \alert<+(2)->{successor} \ 1 } \\
\onslide<+(2)->{& \equiv & \alert<+(2)->{(\lambda n.  \lambda f. \lambda x. f \ (n \ f \ x)) \ 1 } } \\
\onslide<+(2)->{& \to & \lambda f. \lambda x. f \ (\alert<+(2)->{1} \ f \ x) } \\
\onslide<+(2)->{& \equiv & \lambda f. \lambda x. f \ (\alert<+(2)->{(\lambda f. \lambda x. f \ x) \ f } \ x) } \\
\onslide<+(2)->{& \to & \lambda f. \lambda x. f \ (\alert<+(2)->{(\lambda x. f \ x) \ x}) } \\
\onslide<+(2)->{& \to & \lambda f. \lambda x. f \ (f \ x) } \\
\onslide<+(2)->{& \equiv & 2}
\end{align*}

*** Note                                                            :B_block:
   :PROPERTIES:
   :BEAMER_act: <8->
   :BEAMER_env: block
   :END:
We use /Normal Order Reduction/ to reduce inside abstractions!

** Numerals Example - 0 + 0

*** Definitions                                                    :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<+->{0 & \equiv & \lambda f. \lambda x. x } \\
\\
\onslide<+->{plus & \equiv & \lambda m. \lambda n. \lambda f. \lambda x. m \ f \ (n \ f \ x) }
\end{align*}

*** Definitions                                                    :B_column:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_env: column
   :END:
\begin{align*}
\onslide<+->{& & \alert<+->{plus} \ 0 \ 0} \\
\onslide<+->{& \equiv & \alert<+->{(\lambda m. \lambda n. \lambda f. \lambda x. m \ f \ (n \ f \ x)) \ 0 } \ 0 } \\
\onslide<+->{& \to & \alert<+->{(\lambda n. \lambda f. \lambda x. 0 \ f \ (n \ f \ x)) \ 0 }} \\
\onslide<+->{& \to & \lambda f. \lambda x. \alert<+->{0} \ f \ (0 \ f \ x) } \\
\onslide<+->{& \equiv & \lambda f. \lambda x. \alert<+->{(\lambda f. \lambda x. x) \ f} \ (0 \ f \ x) } \\
\onslide<+->{& \to & \lambda f. \lambda x. \alert<+->{(\lambda x. x) \ (0 \ f \ x) }} \\
\onslide<+->{& \to & \lambda f. \lambda x. \alert<+->{0} \ f \ x } \\
\onslide<+->{& \equiv & \lambda f. \lambda x. \alert<+->{(\lambda f. \lambda x. x) \ f } \ x } \\
\onslide<+->{& \to & \lambda f. \lambda x. \alert<+->{(\lambda x. x) \ x }} \\
\onslide<+->{& \to & \lambda f. \lambda x. x } \\
\onslide<+->{& \equiv & 0 }
\end{align*}

* End
** Thanks
- Hope you enjoyed this talk and learned something new.
- Hope it wasn't too much math and dusty formulas ... :)

* Books						 :B_appendix:
  :PROPERTIES:
  :BEAMER_env: appendix
  :END:
** Good Math

*** Image :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: column
    :END:
[[./good_math.jpg]]

*** Description                                                    :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: column
    :END:
/"A Geek's Guide to the Beauty of Numbers, Logic, and Computation"/
- Easy to understand

** The Implementation of Functional Programming Languages
*** Image                                                          :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: column
    :END:
[[./the-implementation-of-functional-programming-languages.jpg]]

*** Description                                                       :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: column
    :END:
- How to compile to the Lambda Calculus?
- Out-of-print, but freely available
  - \small{https://www.microsoft.com/en-us/research/publication/the-implementation-of-functional-programming-languages/}

** Types and Programming Languages

*** Image                                                          :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: column
    :END:
[[./types-and-programming-languages.jpg]]

*** Description                                                       :B_column:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: column
    :END:
- Types systems explained by building interpreters and proving properties
- Very "mathematical", but very complete and self-contained


